[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "armymarkdown"
version = "1.0.0"
description = "A tool for generating Army memorandums from markdown-like syntax"
readme = "README.md"
authors = [
    {name = "Joe Schlessinger", email = "jschless@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Government",
    "Topic :: Text Processing :: Markup",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = ["army", "memo", "markdown", "latex", "military"]
requires-python = ">=3.9"
dependencies = [
    "flask>=2.3.0",
    "flask-wtf>=1.1.0",
    "wtforms>=3.0.0",
    "celery>=5.3.0",
    "redis>=4.5.0",
    "sqlalchemy>=2.0.0",
    "flask-sqlalchemy>=3.0.0",
    "werkzeug>=2.3.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-flask>=1.2.0",
    "pytest-forked>=1.4.0",
    "coverage>=7.0.0",
    "mypy>=1.5.0",
    "types-redis>=4.0.0",
    "flake8>=6.0.0",  # Keep for compatibility during transition
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-flask>=1.2.0",
    "pytest-forked>=1.4.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/jschless/armymarkdown"
Repository = "https://github.com/jschless/armymarkdown"
Issues = "https://github.com/jschless/armymarkdown/issues"

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
indent-width = 4

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
# Plus selected additional rules for code quality
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules that might be too restrictive for existing codebase
ignore = [
    "E501",    # Line too long (handled by formatter)
    "B008",    # Do not perform function calls in argument defaults
    "N806",    # Variable in function should be lowercase (for compatibility)
    "SIM108",  # Use ternary operator (sometimes less readable)
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "assets",
    "static/uploads",
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces, rather than tabs
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["armymarkdown"]
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and unused imports
"tests/*" = ["PLR2004", "S101", "F401", "ARG", "FBT"]
# Allow print statements in scripts
"scripts/*" = ["T201"]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    "node_modules/*",
    "assets/*",
    "static/uploads/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable this
ignore_missing_imports = true
show_error_codes = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "node_modules", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test since we use asserts in tests