name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: true

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment and install dependencies
      run: |
        uv sync --all-extras

    - name: Set up test environment
      run: |
        export FLASK_SECRET="test-secret-key-for-ci"
        export REDIS_URL="redis://localhost:6379/15"
        export RECAPTCHA_PUBLIC_KEY="test-public-key"
        export RECAPTCHA_PRIVATE_KEY="test-private-key"
        export AWS_ACCESS_KEY_ID="test-access-key"
        export AWS_SECRET_ACCESS_KEY="test-secret-key"
        export DISABLE_CAPTCHA="true"
        export DEVELOPMENT="true"

    - name: Run code quality checks
      run: |
        uv run ruff check . --fix --output-format=github
        uv run ruff format --check .
        npx eslint -c config/eslint.config.js --fix static/*.js
        npx htmlhint templates/*.html


    - name: Run security checks
      run: |
        uv run bandit -r app/ db/ -f json || true
        uv run safety scan || true

    - name: Run unit tests with coverage
      env:
        PYTHONPATH: .
        FLASK_SECRET: "test-secret-key-for-ci"
        REDIS_URL: "redis://localhost:6379/15"
        RECAPTCHA_PUBLIC_KEY: "test-public-key"
        RECAPTCHA_PRIVATE_KEY: "test-private-key"
        AWS_ACCESS_KEY_ID: "test-access-key"
        AWS_SECRET_ACCESS_KEY: "test-secret-key"
        DISABLE_CAPTCHA: "true"
        DEVELOPMENT: "true"
      run: |
        uv run pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --continue-on-collection-errors --forked --tb=short --maxfail=10 -v || true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Create virtual environment and install dependencies
      run: |
        uv sync --all-extras

    - name: Run integration tests
      env:
        PYTHONPATH: .
        FLASK_SECRET: "test-secret-key-for-ci"
        REDIS_URL: "redis://localhost:6379/15"
        RECAPTCHA_PUBLIC_KEY: "test-public-key"
        RECAPTCHA_PRIVATE_KEY: "test-private-key"
        AWS_ACCESS_KEY_ID: "test-access-key"
        AWS_SECRET_ACCESS_KEY: "test-secret-key"
        DISABLE_CAPTCHA: "true"
        DEVELOPMENT: "true"
      run: |
        uv run pytest tests/test_integration.py -v || true


  security-scan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install security tools
      run: |
        uv sync --all-extras

    - name: Run safety scan
      run: |
        uv run safety scan --json || true

    - name: Run bandit security scan
      run: |
        uv run bandit -r app/ db/ -f json || true
